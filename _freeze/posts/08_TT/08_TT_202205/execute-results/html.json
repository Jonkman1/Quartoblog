{
  "hash": "bde198de8960fafb1c5d51a1ae2a5dfe",
  "result": {
    "markdown": "---\ntitle: \"Development of crime in population\"\nauthor: \"Wim Bernasco\"\ndate: \"2022-05-22\"\ncategories: [exploration, visualization]\nimage: \"Screenshot.png\"\n---\n\n\n## Introduction\n\nBelow you find the materials Wim Bernasco prepared for the Tidy Tuesday workshop on May 24th 2022. [Here](https://nscrweb.netlify.app/posts/2022-05-24-nsc-r-tidy-tuesday/) is the original link to this workshop and the materials. You find links to two small datasets. One (`crime.csv`) contains the number of police recorded residential burglaries, bike thefts and assaults in the Netherlands per month between January 2012 and April 2022. The other (`population.csv`) contains the number of inhabitants of the Netherlands during the same period, per first day of the month. In the workshop he tried to make sense of long-term temporal trends in these crimes, and hopefully also make useful statements about how things changed when the COVID pandemic arrived around February 2020. He worked out eight steps in the analysis (Bernasco, 2022).\n\n[Acknowledgement: Franziska Yasrebi-de Kom corrected errors and provided fruitfull suggestions for improvement of the first draft.]{.aside}\n\n## Start-up\n\nCreate a new folder on the computer where you run R, and store the two datafiles crime.csv and residents.csv in the folder.\n\nYou will normally load libraries here at the top of your script, but in this example I will load libraries at the point where I need their functionality. This shows when and why they are needed.\n\nIf your project is reasonably small and all files (data, scripts, and output files) can be stored in a single folder without creating confusion, setting a working folder is a good idea. All reading from and writing to disk will be done from and to this folder.\n\n```         \nsetwd(\"X:/YYY/ZZZ\") # for example: setwd(\"C:/Users/bernasco/crime_trends_NL\")\n```\n\nNote: In this script I will use the new `|>` piping symbol. It is equivalent to `%>%` but has two advantages, which are\\\n- (1) it is shorter (2 instead of 3 symbols), and\\\n- (2) it does not require you to load a library, as it has been built into base R\n\n## Read both files from disk and assign each a name.\n\nAny name will do, but I suggest \"crime\" and \" residents\". Read data using the `read_csv` function in package `readr`. `read_csv` has a few advantages over `read.csv` but the latter will also do.\n\n`read_csv` is in the `readr` library, so we load `readr` first. I added `tidyverse` also already.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)     # read_csv function\nlibrary(tidyverse)\n```\n:::\n\n\nNote: in the live workshop we stumbled upon an error caused by our assumption that \"crimes.csv\" and \"population.csv\" had dates coded with dashes (like in \"2022-05-24\") but my Excel version had written it with slashes (like in \"2022/05/24\"). Verify that after reading the files, their 'date' column has type 'date', not type 'character'. You can use `glimpse` to verify this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes <- read_csv(\"crimes.csv\")\n\npopulation <- read_csv(\"population.csv\")\n```\n:::\n\n\n## Explore data\n\nExplore the structure of the files. How many rows (observations), how many columns (variables), what are the variable names? What are their types: Are they integers, characters, dates, factors, .? keys? First explore the crime data.How many observations and how many variables (rows and columns)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes |> dim()        # dim(crimes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 372   3\n```\n:::\n:::\n\n\nFor glimpse, slice-sample and count, we need library dplyr library(dplyr). Display the names and types of the variables, and show values for the first few observations column-wise. Note: verify that column date has type 'date'\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 372\nColumns: 3\n$ date       <date> 2012-01-01, 2012-02-01, 2012-03-01, 2012-04-01, 2012-05-01~\n$ frequency  <dbl> 9787, 8237, 7944, 5955, 6198, 5493, 6168, 6481, 6102, 8178,~\n$ crime_type <chr> \"burglary\", \"burglary\", \"burglary\", \"burglary\", \"burglary\",~\n```\n:::\n:::\n\n\nShow the first few cases row-wise\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  date       frequency crime_type\n  <date>         <dbl> <chr>     \n1 2012-01-01      9787 burglary  \n2 2012-02-01      8237 burglary  \n3 2012-03-01      7944 burglary  \n4 2012-04-01      5955 burglary  \n5 2012-05-01      6198 burglary  \n6 2012-06-01      5493 burglary  \n```\n:::\n:::\n\n\nShow a random sample of 10 cases rather than the first ones. This will usually have more variation in values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes |> slice_sample(n=10) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  date       frequency crime_type\n  <date>         <dbl> <chr>     \n1 2017-09-01      3165 burglary  \n2 2016-03-01      3689 assault   \n3 2018-04-01      6456 bike theft\n4 2021-03-01      2733 assault   \n5 2019-08-01      7221 bike theft\n6 2012-05-01      5177 assault   \n```\n:::\n:::\n\n\nFrequency table of crime types\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes |> count(crime_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  crime_type     n\n  <chr>      <int>\n1 assault      124\n2 bike theft   124\n3 burglary     124\n```\n:::\n:::\n\n\nYou will see we have data for 124 months: 10 full years (2012-2021) + 4 months (Jan-April 2022)\n\nNext explore the population data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation |> dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123   2\n```\n:::\n:::\n\n\nNote: verify that column date has type 'date'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 123\nColumns: 2\n$ date       <date> 2012-01-01, 2012-02-01, 2012-03-01, 2012-04-01, 2012-05-01~\n$ population <dbl> 16730348, 16731280, 16735690, 16737631, 16739764, 16742830,~\n```\n:::\n\n```{.r .cell-code}\npopulation |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 2\n  date       population\n  <date>          <dbl>\n1 2012-01-01   16730348\n2 2012-02-01   16731280\n3 2012-03-01   16735690\n4 2012-04-01   16737631\n5 2012-05-01   16739764\n6 2012-06-01   16742830\n```\n:::\n\n```{.r .cell-code}\npopulation |> slice_sample(n=10) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 2\n  date       population\n  <date>          <dbl>\n1 2013-08-01   16795289\n2 2020-03-01   17423863\n3 2019-11-01   17399364\n4 2017-01-01   17081507\n5 2012-08-01   16746558\n6 2014-12-01   16900158\n```\n:::\n:::\n\n\n## Visualize (plot) population and crime development\n\nVisualize (plot) the development of the population size of the Netherlands between January 2012 and April 2022, and do the same for the frequencies of residential burglary, bike theft and assault.The ggplot function is in the ggplot2 library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nPlot population as a scatterplot.\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\npopulation |> \n    ggplot() + \n    geom_point(mapping = aes(x = date, y = population))\n```\n\n::: {.cell-output-display}\n![Population and crime development](08_TT_202205_files/figure-html/polcrime_scatterplot-1.png){width=576}\n:::\n\n```{.r .cell-code}\n  # or as a line graph\n  population |> \n    ggplot() + \n    geom_line(mapping = aes(x = date, y = population))\n```\n\n::: {.cell-output-display}\n![Population and crime development](08_TT_202205_files/figure-html/polcrime_scatterplot-2.png){width=576}\n:::\n:::\n\n\nKeep it simple first. You can finetune later.Plot burglary frequencies\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##| warning: false\n#| echo: true\n#| label: burglary_freq\n#| fig-cap: \"Burglary frequencies\"\n#| cap-location: margin\n#| fig-width: 6\n#| fig-height: 4\n  crimes %>%\n    filter(crime_type == \"burglary\") |>\n    ggplot() + \n    geom_line(mapping = aes(x=date, y=frequency))\n```\n\n::: {.cell-output-display}\n![](08_TT_202205_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nYou should see a seasonal pattern with highs in Winter (nov-jan) and lows in summer. Plot bike theft\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\n crimes %>%\n    filter(crime_type == \"bike theft\") |>\n    ggplot() + \n    geom_line(mapping = aes(x = date, y = frequency)) \n```\n\n::: {.cell-output-display}\n![Bike theft](08_TT_202205_files/figure-html/bike_theft-1.png){width=576}\n:::\n:::\n\n\nYou should also see a seasonal pattern, but with peaks in autumn (dep-nov)\n\nPlot assault\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrimes %>%\n    filter(crime_type == \"assault\") |>\n    ggplot() + \n    geom_line(mapping = aes(x = date, y = frequency))\n```\n\n::: {.cell-output-display}\n![Seasonal pattern](08_TT_202205_files/figure-html/seasonal_pattern-1.png){width=576}\n:::\n:::\n\n\nThe seasonal pattern for assault shows peaks in spring (apr-jun). Plot the three crime types in a single graph and distinguish them by color.\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrimes |>\n    ggplot() + \n    geom_line(aes(x = date, y = frequency, color = crime_type)) \n```\n\n::: {.cell-output-display}\n![Three crime types in one graph](08_TT_202205_files/figure-html/crime_types-1.png){width=576}\n:::\n:::\n\n\nPlot them in separate panels.\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrimes |>\n    ggplot() + \n    geom_line(aes(x = date, y = frequency)) +\n    # scales = \"free_y\" allows each panel to have its own\n    #  Y-axis scaling\n    facet_wrap(facets = \"crime_type\", scales = \"free_y\", ncol = 1)\n```\n\n::: {.cell-output-display}\n![Types in seperated panels](08_TT_202205_files/figure-html/types_seperated-1.png){width=576}\n:::\n:::\n\n\nI would not advise it, but you can combine panels and color (if you do, hide the legend to prevent redundancy)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimes |>\n    ggplot() + \n    geom_line(aes(x = date, y = frequency, color = crime_type)) +\n    facet_wrap(facets = \"crime_type\", scales = \"free_y\", ncol = 1) +\n    theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](08_TT_202205_files/figure-html/panels_color-1.png){width=576}\n:::\n:::\n\n\n## Calculate corrected rate\n\nCreate a residential burglary rate by relating number of residential burglaries to the size of the population, and think about how you can adjust for different months having a different numbers of days (28-31). To do this, you will need to merge (join) the \"crime\" dataframe with the \"residents\" dataframe by year and month.\n\nMerge crime and population by date (year and month).\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\n crime_population <- \n    # merge with crime type category labels\n    left_join(crimes, population, by = \"date\")\n```\n:::\n\n\nTo calculate the number of days in the month of a date, you can use the `day_in_month` function which is in the `lubridate` library. Divide monthly crime frequency by number of days in the month to obtain the daily crime frequency, and divide by 100,000 to obtain daily crime rates per 100,000 population.\n\nFurther, I multiply the result by mean days per month to obtain the MONTHLY crime rate, but this is arbitrary (daily, weekly, of annual rates would be fine as well)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  library(lubridate)\n  crime_population_corrected <-\n    crime_population |>\n    mutate(\n           # corrected for different month lengths\n           rate = frequency / days_in_month(date) * \n             (365.25/12) / (population / 100000))\n```\n:::\n\n\n## Visualize development of corrected crime rates\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrime_population_corrected |>\n    ggplot() + \n    geom_line(aes(x=date, y=rate, color=crime_type)) +\n    facet_wrap(facets = \"crime_type\", scales=\"free_y\", ncol=1)\n```\n\n::: {.cell-output-display}\n![Corrected crime rates](08_TT_202205_files/figure-html/crime_popcor-1.png){width=576}\n:::\n:::\n\n\nYou got this warning:\n\n```         \n#    Warning message:\n#    Removed 3 row(s) containing missing values    \n```\n\nSo where are these three missing values?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_population_corrected |>\n    # select observations with NA (missing) values on 'rate'\n    filter(is.na(rate))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 5\n  date       frequency crime_type population  rate\n  <date>         <dbl> <chr>           <dbl> <dbl>\n1 2022-04-01      1645 burglary           NA    NA\n2 2022-04-01      7096 bike theft         NA    NA\n3 2022-04-01      3416 assault            NA    NA\n```\n:::\n:::\n\n\nAha! The population data of April 2022 were not yet online! This means we have valid data on both crime and population Jan 2012 to March 2022.\n\n## Crime before and after covid\n\nWhat can we say about the development of crime since February 2020, relative to the developments between 2012 and 2020? How can you quantify this with the data at hand?\\\nLet's look at burglary and start with making a plot that highlights the distinction between the periods before and during the pandemic.\n\nFirst we create a new variable/column that contains an indicator for whether the month is a pandemic month or not.\n\nDefine the date the pandemic started (a single number of the type 'date')\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_start <- as_date(\"2020-02-01\")  \n```\n:::\n\n\nNote: The expression: date \\>= covid_start returns TRUE (1) for 'covid_start' and all later dates, and returns FALSE (0) for all dates before 'covid_start'. The labels parameter assigns 'before' to 0 and 'during' to 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_population_corrected_covid <-  \n  crime_population_corrected |>\n  mutate(covid = factor(date >= covid_start , \n                        labels=c(\"before\", \"during\")))\n```\n:::\n\n\nWe could just add a vertical line at the month that the pandemic started (February 2022)\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrime_population_corrected_covid |>\n    filter(crime_type == \"burglary\") |>\n    ggplot() + \n    geom_line(aes(x=date, y=rate)) +\n    # add a red vertical line at given point on X-axis\n    geom_vline(xintercept = covid_start, color=\"red\")\n```\n\n::: {.cell-output-display}\n![Crime during pandemic](08_TT_202205_files/figure-html/crime_pandemic-1.png){width=576}\n:::\n:::\n\n\nAlternatively, we could create a two-category variable indicating the before-after distinction, and then plot by color\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrime_population_corrected_covid |>\n  filter(crime_type == \"burglary\") |>\n  ggplot() + \n  geom_line(aes(x=date, y=rate, color=covid))\n```\n\n::: {.cell-output-display}\n![Before-after distinction](08_TT_202205_files/figure-html/before_after-1.png){width=576}\n:::\n:::\n\n\nA combined graph for the three crime types\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrime_population_corrected_covid |>\n  ggplot() + \n  geom_line(aes(x=date, y=rate, color=covid)) +\n  facet_wrap(facets = \"crime_type\", scales=\"free_y\", ncol=1)\n```\n\n::: {.cell-output-display}\n![Three types combined](08_TT_202205_files/figure-html/types_combined-1.png){width=576}\n:::\n:::\n\n\nNote that there is a 'hole' in de line graphs between January 2020 and February 2020. This is because we are actually drawing two separate line graphs here, one ending Jan 2022 and one starting Feb 2022. When we create a line graph, we drawing an individual point graph and then connect consecutive points with lines. So there really is nothing between Jan 2020 and Feb 2020.\n\nAs we think of time as continuous (by day, or even hour), we may want to create a 'before covid' line that continues to Feb 2020.One way to do this is to explicitly draw two line graphs in the same plot. As you see this quickly becomes complicated ....\n\nNote: I used \"#F8766D\" and \"#00BFC4\" to get the same colors that ggplot uses by default when there are two categories in a discrete variable\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ncrime_population_corrected |>\n  mutate(precovid_rate = if_else(date <= as_date(\"2020-02-01\"),\n                                 rate, as.numeric(NA)),\n         postcovid_rate =if_else(date >= as_date(\"2020-02-01\"),\n                                 rate, as.numeric(NA))) |>\n  ggplot() + \n  geom_line(aes(x=date, y=precovid_rate), color=\"#F8766D\") +\n  geom_line(aes(x=date, y=postcovid_rate), color=\"#00BFC4\") +\n  xlab(\"rate\") +\n  facet_wrap(facets = \"crime_type\", scales=\"free_y\", ncol=1)  \n```\n\n::: {.cell-output-display}\n![Pre-covid rate](08_TT_202205_files/figure-html/pre_covid-1.png){width=576}\n:::\n:::\n\n\nNow let us quantify the trends. We first calculate annual rates as we are presently not interested in the seasonal variations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_rates_changes <-\n  crime_population_corrected |>\n  # create a variable indicating the year\n  mutate(year = year(date)) |>\n  # select only years 2012-2021 because we have not full 2022 data\n  filter(year < 2022) |>\n  # for each year and crime type, calculate annual crime rate\n  group_by(year, crime_type) |>\n  summarize(annual_rate = sum(rate)) |>\n  # Now calculate relative change: \n  #   By what proportion does this year's rate differ\n  #   from previous year's rate?\n  # We do this for each crime type separately\n  group_by(crime_type) |>\n  # sort by year \n  arrange(year) |>\n  # Copy last year's rate\n  mutate(lag_annual_rate = lag(annual_rate)) |>\n  # Relative change\n  # See, e.g. https://www.youtube.com/watch?v=muAkepkjpZI\n  mutate(annual_change = ((annual_rate - lag_annual_rate) / lag_annual_rate))\n```\n:::\n\n\nJust to check that what you did generates the intended result: lag_annual_rate(2015) == annual_rate(2014) lag_annual_rate(2014) == annual_rate(2013) lag_annual_rate(2013) == annual_rate(2012) lag_annual_rate(2012) == NA (because annual_rate(2011) is unknown)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_rates_changes |>\n  filter(crime_type == \"assault\") |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n# Groups:   crime_type [1]\n   year crime_type annual_rate lag_annual_rate annual_change\n  <dbl> <chr>            <dbl>           <dbl>         <dbl>\n1  2012 assault           336.             NA        NA     \n2  2013 assault           309.            336.       -0.0801\n3  2014 assault           295.            309.       -0.0456\n4  2015 assault           281.            295.       -0.0496\n5  2016 assault           271.            281.       -0.0335\n6  2017 assault           258.            271.       -0.0501\n```\n:::\n:::\n\n\nPlot relative changes\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nannual_rates_changes |>\n  ggplot() +\n  geom_line(aes(x=year, y=annual_rate, color=crime_type))\n```\n\n::: {.cell-output-display}\n![Relative changes](08_TT_202205_files/figure-html/rel_changes-1.png){width=576}\n:::\n:::\n\n\nDefine the covid years\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_years <- c(2020, 2021)\n```\n:::\n\n\nCompare annual change before and during the pandemic per crime type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannual_rates_changes %>%\n  mutate(covid = factor(year %in% covid_years, labels = c(\"before\", \"during\"))) |>\n  group_by(crime_type, covid) |>\n  summarize(mean_change = mean(annual_change, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n# Groups:   crime_type [3]\n  crime_type covid  mean_change\n  <chr>      <fct>        <dbl>\n1 assault    before     -0.0463\n2 assault    during     -0.0799\n3 bike theft before     -0.0587\n4 bike theft during     -0.0718\n5 burglary   before     -0.116 \n6 burglary   during     -0.233 \n```\n:::\n:::\n\n\n## Do anything else with the data that you find fun or seems\n\nTo make senseYou can see that there is an overall decline for each crime type (mean_change is always negative) and the decline is more pronounced (mean_change is more negative) during the pandemic than before the pandemic, in particular for assault and burglary.\n\nFor more rigorous statistical tests, we would need to dive into time series analysis.\n\n## References\n\nBernasco, W. (2022b, May). *NSC-R Workshops: NSC-R Tidy Tuesday. NSCR*. Retrieved from https://nscrweb.netlify.app/posts/2022-05-24-nsc-r-tidy-tuesday\n",
    "supporting": [
      "08_TT_202205_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}